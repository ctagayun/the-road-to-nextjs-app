Links to Robins Book The Road To React  

  - about props:
     https://www.robinwieruch.de/react-pass-props-to-component/


Some Basic React Stuff:
   What is Jsx:
      JSX and HTML differ in their integration and usage within 
      web development. HTML is a standard markup language for
      creating static web pages, while JSX is a syntax extension 
      for JavaScript, mainly used with React, allowing HTML-like 
      code within JavaScript.

    What is Children in React:
      Children is a special prop that allows us to pass in any type of element. 
      It could be a number, a string, a boolean, an array of elements or even 
      another componen

   //using arrow functions without parameters
             const Y = () =>{
            };

            
            // arrow function with parameters
            const hello = (val) => {
               "Hello " + val;
            } 

          

       3. Props 
            //Note: all function components by convention receive "props" even if the function 
            //doesn't have the param "props 
            function Button(props) {
	            return ( 
                  <button onClick={props.onClickFunction}>
                     + {props.increment}
                 </button>
              );
            }

            //sample of passing props to a component defined wit harrow function
            const PlayNumber = props => (
          	<button className="number" onClick={() => console.log('Num', props.number)}>
               {props.number}
            </button>
          );

   
           //Define another component whose sole responsibility is to display the 
           //value of the counter. It will not have it's own state.
            //we are using parentheses after return because we are returning a 
            //function call, remember, a React.createElement function call.

            //since we are passing a prop to display in line 136, add a param here called "props"
            //you can call it any name you want but usually it is named "props" thats the convention

            //This "props" object will have a key-value pair for each attribute
            function Display(props){
                 return (  
                   //Access the "message" attribute in the props
                   <div>{props.message} </div>
                 );
            }
        
            //Simplify rendering by creating a new component called App
            //within App return a DOM tree that contains <button/> amd <displa/> components

            function App()
            {
              /*move the state hook here so that Button and Display components can access it
              via prop */
                const [counter, setCounter] = useState(42);
                //add function to increment counter 
                const incrementCounter = () => setCounter{counter +1};
                return(
                    <div>
                      //props can also pass function.
                      // 1. Pass a prop {incrementCounter} to Button component  
                      // will pass "incrementCounter" function
                      // 2. Pass another prop "increment={5} to be used by Button component
                      <Button onclickFunction={incrementCounter} increment={5}  />
                      //pass a prop and name it message
                      <Display message{counter} />
                    </div>
                );
            }


link to Robin's Github Repo: https://github.com/rwieruch

- Setup project from scratch
      md the-road-to-react
      cd 
      npm init 

      npm install react react-dom next (will show dependencies in pkg.json

      change script to:"dev": "next dev"
         so that we have a development server

      . md app -->  touch app/layout.js touch app/page.js
         - will contain all the routing (NO NEEE creating a separate 'PAGES" folder)
 
 NEXT.JS - https://nextjs.org/
   1. npx create-next-app@latest the-road-to-nextjs-app

      - Apparently, the default setup for a Next.js installation no longer includes
      the src/ folder. However, for this course, we'll be using the src/ folder, 
      as shown in the video, since it's a better approach for managing larger 
      applications down the road.

      - go to https://nextjs.org/blog/next-15-rc

      - copy and run: npm install next@rc react@rc react-dom@rc --force

   2. Exploring the NextJS Starter file
      - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/54082445

      - if anyone wants to replicate your project setup all they need to copy are;
          package.json and package.lock.json and run npm install and they 
          get exact "node_modules"

   3. https://github.com/rwieruch


   4. Deploy
       - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/54082443

       - first push the-road-to-nextjs-app to git hub 
       - second create an account in VERCEL
         https://vercel.com/domingo-tagayuns-projects
         USERID = CTAGAYUN2gmail.com

         - deploy the-road-to-nextjs-app to vercel
           first connect my github account to vercel.
           add the-road-to-nextjs-app to vercel
   5. Lint 
        npm run lint
        add to script in our package.json;
           "lint-fix": "next lint --fix",
        run this to fix any lint error

   6. Pages: How to navigate to target pages
       https://rwieruch.teachable.com/courses/the-road-to-next/lectures/53630910
        - Note: the "App" folder is responsible or the ORIGIN  of routing.
          The "App" since it is responsible for routing it is no 
          displayed in the URL

        Example:
          app/page --> localhost:3000
          app/tickets/page.tsx --> localhost:3000/tickets
          app/tickets/create/page.tsx --> localhost:3000/tickets/create
          app/about/page.tsx --> localhost:3000/about

   7: Static and Dynamic Routes: 
       - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/53630910
       - authors solution: https://github.com/rwieruch/the-road-to-next-app/tree/2024-11_files-based-routing_static-and-dynamic-routes

       -  dynamic route 
          /tickets
            /[ticketId] you can insert any ticketId here
               page.tsx

          

       - How would you implement a TicketEditPage which gets available at
            /tickets/[ticketId]/edit

         Answer: src/app/tickets/[ticketId]/edit/page.tsx 
                 The code will be: 
            /tickets
              [ticketId]
                 page.tsx
                 /edit 
                  page.tsx

   8. Linked Components
       - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/53630962

       - modify HomePage
       - create data.ts file
       - modify TicketPage to display list of tickets 
            /tickets
              /[ticketId]
                /edit
                  page.tsx
            page.tsx (this is the TicketPage)

        Quiz: Whats the difference clicking an <a> anchor tag with using Link Component 
        in NextJS for navigation within a web application:

        Answer: 
          - clicking an <a> html anchor tag will cause full page reload while clicking 
          a Link component in NextJS performs a CLIENT-SIDE navigation without a full 
          page reload

    9. Absolute Imports
        - change TicketPages and TicketPage:
            import { initialTickets } from "../../data"; to: "@/data"
            import { initialTickets } from "../../../data"; to: "@/data"

        Absolute Imports provides a consistent way of referencing modules 
        regardless of their location in the directory structure

    10. Path Constants
          - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/53630964

          create path.ts under /src (not under /app)

   11. Typed Routes (NEW)
        - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/57896994

   12. Layout
        - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/53630965

        - in this section we are going to learn NextLayout component

        - the layout.tsx bubbles down to other pages

        Quiz:
          1. How would you add style for all pages related to the ticketId
          feature, but not the top level HomePage
             Answer: Add Layout.tsx to app/tickets/layout.tsx

          2. What is the app/folder in Next.Js
             Answer: The folder where all the file-based routing happens

   13. Scripts
       - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/57749871

       - we have to define our typescript file .tsx

       - add to scripts in our package.json:
          "type": "tsc --noEmit"

         this will enable us to run in the command line to check our 
         whole project for Typescript errors. Instead of relying to the VSCode to display our errors

  
   14. Const Assertions

      - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/57749872

      - add the following code to TicketsPage to be used in 
        indicating status of a ticket
          const TICKET_ICONS = {
              OPEN: "O",
              IN_PROGRESS: ">",
              DONE: "X", //We can later substitute an icon to "X"
            }

       - modify initialTickets: 
          append "as const," to status field. 
          Example: status: "DONE" as const

    15. Tailwind CSS  
       - A utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, 
         directly in your markup.

       - contains predefined classes that you use in your web app

       - It is still CSS and you use flex grid etc but just quicker to write and maintain. 
       
       - https://tailwindcss.com/ 

    16. Conditional Styling
       - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/53956347

       - first npm install clsx

       - import clsx from "clsx"; in TicketsPage
    
    17. Animation with Tailwind

       - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/53956350

       - add the following to to tailwind.config:
             keyframes: {
            "fade-from-top": {
            from: { opacity: "0", transform: "translateY(-16px)" },
             to: { opacity: "1", transform: "translateY(0)" },
           },
         },
          animation: {
          "fade-from-top": "fade-from-top 0.5s ease-out",
          },

       - reference the above animations to TicketsPage

    18. SVGs
         - https://rwieruch.teachable.com/courses/the-road-to-next/lectures/53956369

         - go to TicketsPage and add icons to used in 
         - go to to SVG icons: https://heroicons.com/
              - search for "check" and copy the Jsx 
                